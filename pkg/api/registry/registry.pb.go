// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkService struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Matches              []*Match `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkService) Reset()         { *m = NetworkService{} }
func (m *NetworkService) String() string { return proto.CompactTextString(m) }
func (*NetworkService) ProtoMessage()    {}
func (*NetworkService) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

func (m *NetworkService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkService.Unmarshal(m, b)
}
func (m *NetworkService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkService.Marshal(b, m, deterministic)
}
func (m *NetworkService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkService.Merge(m, src)
}
func (m *NetworkService) XXX_Size() int {
	return xxx_messageInfo_NetworkService.Size(m)
}
func (m *NetworkService) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkService.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkService proto.InternalMessageInfo

func (m *NetworkService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkService) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkService) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	SourceSelector       map[string]string `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Routes               []*Destination    `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetSourceSelector() map[string]string {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *Match) GetRoutes() []*Destination {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Destination struct {
	DestinationSelector  map[string]string `protobuf:"bytes,1,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weight               uint32            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Destination) Reset()         { *m = Destination{} }
func (m *Destination) String() string { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()    {}
func (*Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{2}
}

func (m *Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Destination.Unmarshal(m, b)
}
func (m *Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Destination.Marshal(b, m, deterministic)
}
func (m *Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destination.Merge(m, src)
}
func (m *Destination) XXX_Size() int {
	return xxx_messageInfo_Destination.Size(m)
}
func (m *Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Destination proto.InternalMessageInfo

func (m *Destination) GetDestinationSelector() map[string]string {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *Destination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type NetworkServiceEndpoint struct {
	Name               string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload            string            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	NetworkServiceName string            `protobuf:"bytes,3,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	Labels             map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State              string            `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Endpoint callback address, could be any of unix/tcp/callback schema ones.
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// Network service manager URL for the endpoint.
	NetworkServiceMangerUrl string               `protobuf:"bytes,7,opt,name=network_service_manger_url,json=networkServiceMangerUrl,proto3" json:"network_service_manger_url,omitempty"`
	ExpirationTime          *timestamp.Timestamp `protobuf:"bytes,8,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *NetworkServiceEndpoint) Reset()         { *m = NetworkServiceEndpoint{} }
func (m *NetworkServiceEndpoint) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceEndpoint) ProtoMessage()    {}
func (*NetworkServiceEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3}
}

func (m *NetworkServiceEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceEndpoint.Unmarshal(m, b)
}
func (m *NetworkServiceEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceEndpoint.Marshal(b, m, deterministic)
}
func (m *NetworkServiceEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceEndpoint.Merge(m, src)
}
func (m *NetworkServiceEndpoint) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceEndpoint.Size(m)
}
func (m *NetworkServiceEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceEndpoint proto.InternalMessageInfo

func (m *NetworkServiceEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkServiceEndpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetNetworkServiceMangerUrl() string {
	if m != nil {
		return m.NetworkServiceMangerUrl
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type NetworkServiceSelector struct {
	NetworkServiceName   string   `protobuf:"bytes,1,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkServiceSelector) Reset()         { *m = NetworkServiceSelector{} }
func (m *NetworkServiceSelector) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceSelector) ProtoMessage()    {}
func (*NetworkServiceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{4}
}

func (m *NetworkServiceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceSelector.Unmarshal(m, b)
}
func (m *NetworkServiceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceSelector.Marshal(b, m, deterministic)
}
func (m *NetworkServiceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceSelector.Merge(m, src)
}
func (m *NetworkServiceSelector) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceSelector.Size(m)
}
func (m *NetworkServiceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceSelector proto.InternalMessageInfo

func (m *NetworkServiceSelector) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *NetworkServiceSelector) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type NetworkServiceEndpointSelector struct {
	NetworkServiceEndpointName string                  `protobuf:"bytes,1,opt,name=network_service_endpoint_name,json=networkServiceEndpointName,proto3" json:"network_service_endpoint_name,omitempty"`
	NetworkServiceMangerUrl    string                  `protobuf:"bytes,2,opt,name=network_service_manger_url,json=networkServiceMangerUrl,proto3" json:"network_service_manger_url,omitempty"`
	Labels                     map[string]string       `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceSelector            *NetworkServiceSelector `protobuf:"bytes,4,opt,name=service_selector,json=serviceSelector,proto3" json:"service_selector,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                `json:"-"`
	XXX_unrecognized           []byte                  `json:"-"`
	XXX_sizecache              int32                   `json:"-"`
}

func (m *NetworkServiceEndpointSelector) Reset()         { *m = NetworkServiceEndpointSelector{} }
func (m *NetworkServiceEndpointSelector) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceEndpointSelector) ProtoMessage()    {}
func (*NetworkServiceEndpointSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{5}
}

func (m *NetworkServiceEndpointSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceEndpointSelector.Unmarshal(m, b)
}
func (m *NetworkServiceEndpointSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceEndpointSelector.Marshal(b, m, deterministic)
}
func (m *NetworkServiceEndpointSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceEndpointSelector.Merge(m, src)
}
func (m *NetworkServiceEndpointSelector) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceEndpointSelector.Size(m)
}
func (m *NetworkServiceEndpointSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceEndpointSelector.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceEndpointSelector proto.InternalMessageInfo

func (m *NetworkServiceEndpointSelector) GetNetworkServiceEndpointName() string {
	if m != nil {
		return m.NetworkServiceEndpointName
	}
	return ""
}

func (m *NetworkServiceEndpointSelector) GetNetworkServiceMangerUrl() string {
	if m != nil {
		return m.NetworkServiceMangerUrl
	}
	return ""
}

func (m *NetworkServiceEndpointSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkServiceEndpointSelector) GetServiceSelector() *NetworkServiceSelector {
	if m != nil {
		return m.ServiceSelector
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkService)(nil), "registry.NetworkService")
	proto.RegisterType((*Match)(nil), "registry.Match")
	proto.RegisterMapType((map[string]string)(nil), "registry.Match.SourceSelectorEntry")
	proto.RegisterType((*Destination)(nil), "registry.Destination")
	proto.RegisterMapType((map[string]string)(nil), "registry.Destination.DestinationSelectorEntry")
	proto.RegisterType((*NetworkServiceEndpoint)(nil), "registry.NetworkServiceEndpoint")
	proto.RegisterMapType((map[string]string)(nil), "registry.NetworkServiceEndpoint.LabelsEntry")
	proto.RegisterType((*NetworkServiceSelector)(nil), "registry.NetworkServiceSelector")
	proto.RegisterType((*NetworkServiceEndpointSelector)(nil), "registry.NetworkServiceEndpointSelector")
	proto.RegisterMapType((map[string]string)(nil), "registry.NetworkServiceEndpointSelector.LabelsEntry")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x93, 0x34, 0x29, 0x13, 0x91, 0x54, 0xdb, 0x52, 0x2c, 0x4b, 0xa0, 0x28, 0x5c, 0x82,
	0x04, 0x4e, 0x15, 0x7a, 0xe0, 0x47, 0x42, 0x2a, 0xb4, 0xe1, 0x40, 0x5b, 0x24, 0xb7, 0x05, 0x89,
	0x4b, 0xe4, 0x24, 0x8b, 0x63, 0xd5, 0xde, 0xb5, 0x76, 0xd7, 0x2d, 0x79, 0x1e, 0x1e, 0x80, 0xc7,
	0xe0, 0xca, 0x9b, 0x70, 0xe3, 0x8c, 0xbc, 0xbb, 0x4e, 0xe2, 0xd4, 0x6e, 0x5a, 0x95, 0x4b, 0xb2,
	0xb3, 0xf3, 0xed, 0x37, 0x33, 0xdf, 0xcc, 0x24, 0xd0, 0x60, 0xd8, 0xf3, 0xb9, 0x60, 0x53, 0x3b,
	0x62, 0x54, 0x50, 0xb4, 0x9e, 0xda, 0x96, 0x19, 0x89, 0x69, 0x84, 0x79, 0x17, 0x87, 0x91, 0x98,
	0xaa, 0x4f, 0x85, 0xb1, 0x5a, 0xda, 0x23, 0xfc, 0x10, 0x73, 0xe1, 0x86, 0xd1, 0xfc, 0xa4, 0x10,
	0x6d, 0x1f, 0x1a, 0xc7, 0x58, 0x5c, 0x52, 0x76, 0x7e, 0x82, 0xd9, 0x85, 0x3f, 0xc2, 0x08, 0x41,
	0x85, 0xb8, 0x21, 0x36, 0x8d, 0x96, 0xd1, 0xb9, 0xe7, 0xc8, 0x33, 0x32, 0xa1, 0x16, 0xb9, 0xd3,
	0x80, 0xba, 0x63, 0xb3, 0x24, 0xaf, 0x53, 0x13, 0x3d, 0x85, 0x5a, 0xe8, 0x8a, 0xd1, 0x04, 0x73,
	0xb3, 0xdc, 0x2a, 0x77, 0xea, 0xbd, 0xa6, 0x3d, 0xcb, 0xf3, 0x28, 0x71, 0x38, 0xa9, 0xbf, 0xfd,
	0xcb, 0x80, 0x35, 0x79, 0x85, 0x0e, 0xa1, 0xc9, 0x69, 0xcc, 0x46, 0x78, 0xc0, 0x71, 0x80, 0x47,
	0x82, 0x32, 0xd3, 0x90, 0x8f, 0x9f, 0x2c, 0x3d, 0xb6, 0x4f, 0x24, 0xec, 0x44, 0xa3, 0x0e, 0x88,
	0x60, 0x53, 0xa7, 0xc1, 0x33, 0x97, 0xe8, 0x39, 0x54, 0x19, 0x8d, 0x05, 0xe6, 0x66, 0x49, 0x92,
	0x3c, 0x98, 0x93, 0xec, 0x63, 0x2e, 0x7c, 0xe2, 0x0a, 0x9f, 0x12, 0x47, 0x83, 0xac, 0x3d, 0xd8,
	0xcc, 0x61, 0x45, 0x1b, 0x50, 0x3e, 0xc7, 0x53, 0x5d, 0x75, 0x72, 0x44, 0x5b, 0xb0, 0x76, 0xe1,
	0x06, 0x31, 0xd6, 0x25, 0x2b, 0xe3, 0x75, 0xe9, 0xa5, 0xd1, 0xfe, 0x6d, 0x40, 0x7d, 0x81, 0x1a,
	0xb9, 0xb0, 0x35, 0x9e, 0x9b, 0xcb, 0x45, 0xd9, 0xb9, 0xf9, 0x2c, 0x9e, 0xb3, 0xf5, 0x6d, 0x8e,
	0xaf, 0x7a, 0xd0, 0x36, 0x54, 0x2f, 0xb1, 0xef, 0x4d, 0x84, 0xcc, 0xe6, 0xbe, 0xa3, 0x2d, 0xab,
	0x0f, 0x66, 0x11, 0xd1, 0xad, 0x4a, 0xfa, 0x51, 0x86, 0xed, 0xec, 0x20, 0x1c, 0x90, 0x71, 0x44,
	0x7d, 0x22, 0x6e, 0x39, 0x10, 0x3b, 0xb0, 0x45, 0x14, 0xcf, 0x80, 0x2b, 0xa2, 0x81, 0x7c, 0x5d,
	0x96, 0x30, 0x44, 0x32, 0x31, 0x8e, 0x13, 0xae, 0x7d, 0xa8, 0x06, 0xee, 0x10, 0x07, 0xdc, 0xac,
	0x48, 0xbd, 0x9e, 0xcd, 0xf5, 0xca, 0xcf, 0xc8, 0x3e, 0x94, 0x70, 0xa5, 0x96, 0x7e, 0x9b, 0x94,
	0xc6, 0x85, 0x2b, 0xb0, 0xb9, 0xa6, 0x4a, 0x93, 0x46, 0x22, 0x41, 0xcc, 0x02, 0xb3, 0xaa, 0x24,
	0x88, 0x59, 0x80, 0xde, 0x80, 0xb5, 0x9c, 0x5f, 0xe8, 0x12, 0x0f, 0xb3, 0x41, 0x02, 0xac, 0x49,
	0xe0, 0xc3, 0x6c, 0x96, 0x47, 0xd2, 0x7f, 0xc6, 0x02, 0xf4, 0x1e, 0x9a, 0xf8, 0x7b, 0xe4, 0x33,
	0xd5, 0xe7, 0x64, 0x97, 0xcc, 0xf5, 0x96, 0xd1, 0xa9, 0xf7, 0x2c, 0xdb, 0xa3, 0xd4, 0x0b, 0xb0,
	0xda, 0xaa, 0x61, 0xfc, 0xcd, 0x3e, 0x4d, 0x17, 0xcd, 0x69, 0xcc, 0x9f, 0x24, 0x97, 0xd6, 0x2b,
	0xa8, 0x2f, 0x14, 0x70, 0xab, 0x2e, 0x8d, 0x97, 0x9b, 0x34, 0x9b, 0x8f, 0x22, 0xd9, 0x8d, 0x42,
	0xd9, 0x0b, 0x5b, 0xd8, 0xfe, 0x5b, 0x82, 0xc7, 0xf9, 0xca, 0xcf, 0xc2, 0xed, 0xc1, 0xa3, 0xe5,
	0x70, 0x58, 0x63, 0x16, 0xe3, 0x5a, 0x24, 0x97, 0x46, 0xc6, 0xbf, 0xbe, 0x11, 0xa5, 0xeb, 0x1b,
	0x71, 0x38, 0x9b, 0x19, 0xf5, 0xab, 0xb3, 0xbb, 0x6a, 0x66, 0xd2, 0xcc, 0x73, 0x67, 0xe7, 0x23,
	0x6c, 0xa4, 0x29, 0xcc, 0x76, 0xb7, 0x22, 0xfb, 0xda, 0x2a, 0xe2, 0x4d, 0xf9, 0x9c, 0x26, 0xcf,
	0x5e, 0xdc, 0xa1, 0xbd, 0xbd, 0x3f, 0x85, 0xc2, 0x3b, 0x3a, 0x0b, 0xf4, 0x19, 0x36, 0xd4, 0x19,
	0xb3, 0x4f, 0xec, 0x2c, 0x1a, 0x27, 0x43, 0xde, 0x5a, 0x55, 0xbc, 0xb5, 0x12, 0x81, 0xbe, 0x40,
	0xed, 0x88, 0x12, 0x3f, 0xe9, 0x6d, 0xe7, 0xa6, 0x5a, 0xae, 0xa6, 0xdd, 0x31, 0xd0, 0x29, 0x54,
	0xfa, 0x3e, 0x19, 0xff, 0x67, 0xd6, 0x3e, 0xc0, 0x19, 0x61, 0x5a, 0x88, 0x1b, 0x08, 0xb0, 0x7d,
	0x65, 0x3f, 0x0f, 0x92, 0xbf, 0xc9, 0xde, 0xcf, 0xd2, 0xf2, 0x46, 0xcd, 0x94, 0xee, 0xe7, 0x28,
	0x6d, 0x16, 0x05, 0xb2, 0x0a, 0x3d, 0xe8, 0xc3, 0x5c, 0xd9, 0x95, 0xd3, 0x54, 0x4c, 0xb3, 0x63,
	0xa0, 0x7d, 0xad, 0xe4, 0xdd, 0x58, 0xde, 0x66, 0x94, 0x2b, 0x2e, 0xa8, 0x40, 0xb1, 0x77, 0xbb,
	0x5f, 0x7b, 0x9e, 0x2f, 0x26, 0xf1, 0xd0, 0x1e, 0xd1, 0xb0, 0xab, 0xf7, 0x53, 0xef, 0x40, 0x88,
	0xf9, 0xa4, 0xeb, 0x46, 0x7e, 0x37, 0x3a, 0xf7, 0xe4, 0x77, 0x4a, 0x3e, 0xac, 0x4a, 0x96, 0x17,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x27, 0x01, 0x07, 0xc5, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkServiceEndpointRegistryClient is the client API for NetworkServiceEndpointRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceEndpointRegistryClient interface {
	RegisterOrUpdate(ctx context.Context, in *NetworkServiceEndpoint, opts ...grpc.CallOption) (*NetworkServiceEndpoint, error)
	Monitor(ctx context.Context, in *NetworkServiceEndpointSelector, opts ...grpc.CallOption) (NetworkServiceEndpointRegistry_MonitorClient, error)
	Find(ctx context.Context, in *NetworkServiceEndpointSelector, opts ...grpc.CallOption) (NetworkServiceEndpointRegistry_FindClient, error)
	Unregister(ctx context.Context, in *NetworkServiceEndpoint, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkServiceEndpointRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceEndpointRegistryClient(cc grpc.ClientConnInterface) NetworkServiceEndpointRegistryClient {
	return &networkServiceEndpointRegistryClient{cc}
}

func (c *networkServiceEndpointRegistryClient) RegisterOrUpdate(ctx context.Context, in *NetworkServiceEndpoint, opts ...grpc.CallOption) (*NetworkServiceEndpoint, error) {
	out := new(NetworkServiceEndpoint)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceEndpointRegistry/RegisterOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceEndpointRegistryClient) Monitor(ctx context.Context, in *NetworkServiceEndpointSelector, opts ...grpc.CallOption) (NetworkServiceEndpointRegistry_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceEndpointRegistry_serviceDesc.Streams[0], "/registry.NetworkServiceEndpointRegistry/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceEndpointRegistryMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceEndpointRegistry_MonitorClient interface {
	Recv() (*NetworkServiceEndpoint, error)
	grpc.ClientStream
}

type networkServiceEndpointRegistryMonitorClient struct {
	grpc.ClientStream
}

func (x *networkServiceEndpointRegistryMonitorClient) Recv() (*NetworkServiceEndpoint, error) {
	m := new(NetworkServiceEndpoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceEndpointRegistryClient) Find(ctx context.Context, in *NetworkServiceEndpointSelector, opts ...grpc.CallOption) (NetworkServiceEndpointRegistry_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceEndpointRegistry_serviceDesc.Streams[1], "/registry.NetworkServiceEndpointRegistry/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceEndpointRegistryFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceEndpointRegistry_FindClient interface {
	Recv() (*NetworkServiceEndpoint, error)
	grpc.ClientStream
}

type networkServiceEndpointRegistryFindClient struct {
	grpc.ClientStream
}

func (x *networkServiceEndpointRegistryFindClient) Recv() (*NetworkServiceEndpoint, error) {
	m := new(NetworkServiceEndpoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceEndpointRegistryClient) Unregister(ctx context.Context, in *NetworkServiceEndpoint, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceEndpointRegistry/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceEndpointRegistryServer is the server API for NetworkServiceEndpointRegistry service.
type NetworkServiceEndpointRegistryServer interface {
	RegisterOrUpdate(context.Context, *NetworkServiceEndpoint) (*NetworkServiceEndpoint, error)
	Monitor(*NetworkServiceEndpointSelector, NetworkServiceEndpointRegistry_MonitorServer) error
	Find(*NetworkServiceEndpointSelector, NetworkServiceEndpointRegistry_FindServer) error
	Unregister(context.Context, *NetworkServiceEndpoint) (*empty.Empty, error)
}

// UnimplementedNetworkServiceEndpointRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceEndpointRegistryServer struct {
}

func (*UnimplementedNetworkServiceEndpointRegistryServer) RegisterOrUpdate(ctx context.Context, req *NetworkServiceEndpoint) (*NetworkServiceEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrUpdate not implemented")
}
func (*UnimplementedNetworkServiceEndpointRegistryServer) Monitor(req *NetworkServiceEndpointSelector, srv NetworkServiceEndpointRegistry_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (*UnimplementedNetworkServiceEndpointRegistryServer) Find(req *NetworkServiceEndpointSelector, srv NetworkServiceEndpointRegistry_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedNetworkServiceEndpointRegistryServer) Unregister(ctx context.Context, req *NetworkServiceEndpoint) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}

func RegisterNetworkServiceEndpointRegistryServer(s *grpc.Server, srv NetworkServiceEndpointRegistryServer) {
	s.RegisterService(&_NetworkServiceEndpointRegistry_serviceDesc, srv)
}

func _NetworkServiceEndpointRegistry_RegisterOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceEndpointRegistryServer).RegisterOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceEndpointRegistry/RegisterOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceEndpointRegistryServer).RegisterOrUpdate(ctx, req.(*NetworkServiceEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceEndpointRegistry_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceEndpointSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceEndpointRegistryServer).Monitor(m, &networkServiceEndpointRegistryMonitorServer{stream})
}

type NetworkServiceEndpointRegistry_MonitorServer interface {
	Send(*NetworkServiceEndpoint) error
	grpc.ServerStream
}

type networkServiceEndpointRegistryMonitorServer struct {
	grpc.ServerStream
}

func (x *networkServiceEndpointRegistryMonitorServer) Send(m *NetworkServiceEndpoint) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServiceEndpointRegistry_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceEndpointSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceEndpointRegistryServer).Find(m, &networkServiceEndpointRegistryFindServer{stream})
}

type NetworkServiceEndpointRegistry_FindServer interface {
	Send(*NetworkServiceEndpoint) error
	grpc.ServerStream
}

type networkServiceEndpointRegistryFindServer struct {
	grpc.ServerStream
}

func (x *networkServiceEndpointRegistryFindServer) Send(m *NetworkServiceEndpoint) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServiceEndpointRegistry_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceEndpointRegistryServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceEndpointRegistry/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceEndpointRegistryServer).Unregister(ctx, req.(*NetworkServiceEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceEndpointRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceEndpointRegistry",
	HandlerType: (*NetworkServiceEndpointRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrUpdate",
			Handler:    _NetworkServiceEndpointRegistry_RegisterOrUpdate_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _NetworkServiceEndpointRegistry_Unregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _NetworkServiceEndpointRegistry_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Find",
			Handler:       _NetworkServiceEndpointRegistry_Find_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// NetworkServiceRegistryClient is the client API for NetworkServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceRegistryClient interface {
	RegisterOrUpdate(ctx context.Context, in *NetworkService, opts ...grpc.CallOption) (*NetworkService, error)
	Monitor(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_MonitorClient, error)
	Find(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_FindClient, error)
	Unregister(ctx context.Context, in *NetworkService, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkServiceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceRegistryClient(cc grpc.ClientConnInterface) NetworkServiceRegistryClient {
	return &networkServiceRegistryClient{cc}
}

func (c *networkServiceRegistryClient) RegisterOrUpdate(ctx context.Context, in *NetworkService, opts ...grpc.CallOption) (*NetworkService, error) {
	out := new(NetworkService)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/RegisterOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceRegistryClient) Monitor(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceRegistry_serviceDesc.Streams[0], "/registry.NetworkServiceRegistry/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceRegistryMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceRegistry_MonitorClient interface {
	Recv() (*NetworkService, error)
	grpc.ClientStream
}

type networkServiceRegistryMonitorClient struct {
	grpc.ClientStream
}

func (x *networkServiceRegistryMonitorClient) Recv() (*NetworkService, error) {
	m := new(NetworkService)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceRegistryClient) Find(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceRegistry_serviceDesc.Streams[1], "/registry.NetworkServiceRegistry/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceRegistryFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceRegistry_FindClient interface {
	Recv() (*NetworkService, error)
	grpc.ClientStream
}

type networkServiceRegistryFindClient struct {
	grpc.ClientStream
}

func (x *networkServiceRegistryFindClient) Recv() (*NetworkService, error) {
	m := new(NetworkService)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceRegistryClient) Unregister(ctx context.Context, in *NetworkService, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceRegistryServer is the server API for NetworkServiceRegistry service.
type NetworkServiceRegistryServer interface {
	RegisterOrUpdate(context.Context, *NetworkService) (*NetworkService, error)
	Monitor(*NetworkServiceSelector, NetworkServiceRegistry_MonitorServer) error
	Find(*NetworkServiceSelector, NetworkServiceRegistry_FindServer) error
	Unregister(context.Context, *NetworkService) (*empty.Empty, error)
}

// UnimplementedNetworkServiceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceRegistryServer struct {
}

func (*UnimplementedNetworkServiceRegistryServer) RegisterOrUpdate(ctx context.Context, req *NetworkService) (*NetworkService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrUpdate not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Monitor(req *NetworkServiceSelector, srv NetworkServiceRegistry_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Find(req *NetworkServiceSelector, srv NetworkServiceRegistry_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Unregister(ctx context.Context, req *NetworkService) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}

func RegisterNetworkServiceRegistryServer(s *grpc.Server, srv NetworkServiceRegistryServer) {
	s.RegisterService(&_NetworkServiceRegistry_serviceDesc, srv)
}

func _NetworkServiceRegistry_RegisterOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).RegisterOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/RegisterOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).RegisterOrUpdate(ctx, req.(*NetworkService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceRegistry_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceRegistryServer).Monitor(m, &networkServiceRegistryMonitorServer{stream})
}

type NetworkServiceRegistry_MonitorServer interface {
	Send(*NetworkService) error
	grpc.ServerStream
}

type networkServiceRegistryMonitorServer struct {
	grpc.ServerStream
}

func (x *networkServiceRegistryMonitorServer) Send(m *NetworkService) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServiceRegistry_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceRegistryServer).Find(m, &networkServiceRegistryFindServer{stream})
}

type NetworkServiceRegistry_FindServer interface {
	Send(*NetworkService) error
	grpc.ServerStream
}

type networkServiceRegistryFindServer struct {
	grpc.ServerStream
}

func (x *networkServiceRegistryFindServer) Send(m *NetworkService) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServiceRegistry_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).Unregister(ctx, req.(*NetworkService))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceRegistry",
	HandlerType: (*NetworkServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrUpdate",
			Handler:    _NetworkServiceRegistry_RegisterOrUpdate_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _NetworkServiceRegistry_Unregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _NetworkServiceRegistry_Monitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Find",
			Handler:       _NetworkServiceRegistry_Find_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}
