// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkServiceKind int32

const (
	NetworkServiceKind_CROSS_CONNECT_NSE        NetworkServiceKind = 0
	NetworkServiceKind_NETWORK_SERVICE_MANAGER  NetworkServiceKind = 1
	NetworkServiceKind_NETWORK_SERVICE_ENDPOINT NetworkServiceKind = 2
)

var NetworkServiceKind_name = map[int32]string{
	0: "CROSS_CONNECT_NSE",
	1: "NETWORK_SERVICE_MANAGER",
	2: "NETWORK_SERVICE_ENDPOINT",
}

var NetworkServiceKind_value = map[string]int32{
	"CROSS_CONNECT_NSE":        0,
	"NETWORK_SERVICE_MANAGER":  1,
	"NETWORK_SERVICE_ENDPOINT": 2,
}

func (x NetworkServiceKind) String() string {
	return proto.EnumName(NetworkServiceKind_name, int32(x))
}

func (NetworkServiceKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

type NetworkService struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Matches              []*Match `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkService) Reset()         { *m = NetworkService{} }
func (m *NetworkService) String() string { return proto.CompactTextString(m) }
func (*NetworkService) ProtoMessage()    {}
func (*NetworkService) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}

func (m *NetworkService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkService.Unmarshal(m, b)
}
func (m *NetworkService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkService.Marshal(b, m, deterministic)
}
func (m *NetworkService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkService.Merge(m, src)
}
func (m *NetworkService) XXX_Size() int {
	return xxx_messageInfo_NetworkService.Size(m)
}
func (m *NetworkService) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkService.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkService proto.InternalMessageInfo

func (m *NetworkService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkService) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkService) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	SourceSelector       map[string]string `protobuf:"bytes,1,rep,name=source_selector,json=sourceSelector,proto3" json:"source_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Routes               []*Destination    `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}

func (m *Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Match.Unmarshal(m, b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Match.Marshal(b, m, deterministic)
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return xxx_messageInfo_Match.Size(m)
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetSourceSelector() map[string]string {
	if m != nil {
		return m.SourceSelector
	}
	return nil
}

func (m *Match) GetRoutes() []*Destination {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Destination struct {
	DestinationSelector  map[string]string `protobuf:"bytes,1,rep,name=destination_selector,json=destinationSelector,proto3" json:"destination_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weight               uint32            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Destination) Reset()         { *m = Destination{} }
func (m *Destination) String() string { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()    {}
func (*Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{2}
}

func (m *Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Destination.Unmarshal(m, b)
}
func (m *Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Destination.Marshal(b, m, deterministic)
}
func (m *Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destination.Merge(m, src)
}
func (m *Destination) XXX_Size() int {
	return xxx_messageInfo_Destination.Size(m)
}
func (m *Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Destination proto.InternalMessageInfo

func (m *Destination) GetDestinationSelector() map[string]string {
	if m != nil {
		return m.DestinationSelector
	}
	return nil
}

func (m *Destination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type NetworkServiceEndpoint struct {
	Name               string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload            string            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	NetworkServiceName string            `protobuf:"bytes,3,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	Labels             map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State              string            `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Endpoint callback address, could be any of unix/tcp/callback schema ones.
	Url                  string               `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	ExpirationTime       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkServiceEndpoint) Reset()         { *m = NetworkServiceEndpoint{} }
func (m *NetworkServiceEndpoint) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceEndpoint) ProtoMessage()    {}
func (*NetworkServiceEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3}
}

func (m *NetworkServiceEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceEndpoint.Unmarshal(m, b)
}
func (m *NetworkServiceEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceEndpoint.Marshal(b, m, deterministic)
}
func (m *NetworkServiceEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceEndpoint.Merge(m, src)
}
func (m *NetworkServiceEndpoint) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceEndpoint.Size(m)
}
func (m *NetworkServiceEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceEndpoint proto.InternalMessageInfo

func (m *NetworkServiceEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkServiceEndpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NetworkServiceEndpoint) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type NSERegistration struct {
	NetworkService         *NetworkService         `protobuf:"bytes,1,opt,name=network_service,json=networkService,proto3" json:"network_service,omitempty"`
	NetworkServiceManager  *NetworkServiceEndpoint `protobuf:"bytes,2,opt,name=network_service_manager,json=networkServiceManager,proto3" json:"network_service_manager,omitempty"`
	NetworkServiceEndpoint *NetworkServiceEndpoint `protobuf:"bytes,3,opt,name=network_service_endpoint,json=networkServiceEndpoint,proto3" json:"network_service_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *NSERegistration) Reset()         { *m = NSERegistration{} }
func (m *NSERegistration) String() string { return proto.CompactTextString(m) }
func (*NSERegistration) ProtoMessage()    {}
func (*NSERegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{4}
}

func (m *NSERegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NSERegistration.Unmarshal(m, b)
}
func (m *NSERegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NSERegistration.Marshal(b, m, deterministic)
}
func (m *NSERegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSERegistration.Merge(m, src)
}
func (m *NSERegistration) XXX_Size() int {
	return xxx_messageInfo_NSERegistration.Size(m)
}
func (m *NSERegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NSERegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NSERegistration proto.InternalMessageInfo

func (m *NSERegistration) GetNetworkService() *NetworkService {
	if m != nil {
		return m.NetworkService
	}
	return nil
}

func (m *NSERegistration) GetNetworkServiceManager() *NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceManager
	}
	return nil
}

func (m *NSERegistration) GetNetworkServiceEndpoint() *NetworkServiceEndpoint {
	if m != nil {
		return m.NetworkServiceEndpoint
	}
	return nil
}

type NetworkServiceSelector struct {
	Kind                       NetworkServiceKind `protobuf:"varint,1,opt,name=kind,proto3,enum=registry.NetworkServiceKind" json:"kind,omitempty"`
	NetworkServiceEndpointName string             `protobuf:"bytes,2,opt,name=network_service_endpoint_name,json=networkServiceEndpointName,proto3" json:"network_service_endpoint_name,omitempty"`
	NetworkServiceName         string             `protobuf:"bytes,3,opt,name=network_service_name,json=networkServiceName,proto3" json:"network_service_name,omitempty"`
	Labels                     map[string]string  `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Payload                    string             `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}           `json:"-"`
	XXX_unrecognized           []byte             `json:"-"`
	XXX_sizecache              int32              `json:"-"`
}

func (m *NetworkServiceSelector) Reset()         { *m = NetworkServiceSelector{} }
func (m *NetworkServiceSelector) String() string { return proto.CompactTextString(m) }
func (*NetworkServiceSelector) ProtoMessage()    {}
func (*NetworkServiceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{5}
}

func (m *NetworkServiceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkServiceSelector.Unmarshal(m, b)
}
func (m *NetworkServiceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkServiceSelector.Marshal(b, m, deterministic)
}
func (m *NetworkServiceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkServiceSelector.Merge(m, src)
}
func (m *NetworkServiceSelector) XXX_Size() int {
	return xxx_messageInfo_NetworkServiceSelector.Size(m)
}
func (m *NetworkServiceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkServiceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkServiceSelector proto.InternalMessageInfo

func (m *NetworkServiceSelector) GetKind() NetworkServiceKind {
	if m != nil {
		return m.Kind
	}
	return NetworkServiceKind_CROSS_CONNECT_NSE
}

func (m *NetworkServiceSelector) GetNetworkServiceEndpointName() string {
	if m != nil {
		return m.NetworkServiceEndpointName
	}
	return ""
}

func (m *NetworkServiceSelector) GetNetworkServiceName() string {
	if m != nil {
		return m.NetworkServiceName
	}
	return ""
}

func (m *NetworkServiceSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NetworkServiceSelector) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterEnum("registry.NetworkServiceKind", NetworkServiceKind_name, NetworkServiceKind_value)
	proto.RegisterType((*NetworkService)(nil), "registry.NetworkService")
	proto.RegisterType((*Match)(nil), "registry.Match")
	proto.RegisterMapType((map[string]string)(nil), "registry.Match.SourceSelectorEntry")
	proto.RegisterType((*Destination)(nil), "registry.Destination")
	proto.RegisterMapType((map[string]string)(nil), "registry.Destination.DestinationSelectorEntry")
	proto.RegisterType((*NetworkServiceEndpoint)(nil), "registry.NetworkServiceEndpoint")
	proto.RegisterMapType((map[string]string)(nil), "registry.NetworkServiceEndpoint.LabelsEntry")
	proto.RegisterType((*NSERegistration)(nil), "registry.NSERegistration")
	proto.RegisterType((*NetworkServiceSelector)(nil), "registry.NetworkServiceSelector")
	proto.RegisterMapType((map[string]string)(nil), "registry.NetworkServiceSelector.LabelsEntry")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x72, 0xda, 0x46,
	0x14, 0xae, 0xc0, 0x80, 0x7b, 0x98, 0x02, 0x5d, 0xdb, 0x58, 0x55, 0xdd, 0x19, 0x86, 0xde, 0xb8,
	0x9d, 0x56, 0x78, 0xd4, 0x5e, 0xb4, 0xbd, 0xe8, 0x04, 0x83, 0x9c, 0x78, 0x6c, 0x44, 0x46, 0x22,
	0x3f, 0xe3, 0x1b, 0x46, 0xa0, 0x35, 0xec, 0xa0, 0xbf, 0x91, 0x16, 0x1c, 0xbd, 0x42, 0x9e, 0x24,
	0x6f, 0x92, 0xdb, 0x5c, 0xe7, 0x01, 0xf2, 0x1c, 0x19, 0xed, 0x0a, 0x83, 0xf8, 0x89, 0xed, 0x78,
	0x72, 0x03, 0x7b, 0xf6, 0x9c, 0xf3, 0xe9, 0x7c, 0xdf, 0x7e, 0x2b, 0x41, 0x29, 0xc0, 0x23, 0x12,
	0xd2, 0x20, 0x92, 0xfd, 0xc0, 0xa3, 0x1e, 0xda, 0x9d, 0xc7, 0x92, 0xe8, 0xd3, 0xc8, 0xc7, 0x61,
	0x03, 0x3b, 0x3e, 0x8d, 0xf8, 0x2f, 0xaf, 0x91, 0x6a, 0x49, 0x86, 0x12, 0x07, 0x87, 0xd4, 0x74,
	0xfc, 0xc5, 0x8a, 0x57, 0xd4, 0x09, 0x94, 0x34, 0x4c, 0x6f, 0xbc, 0x60, 0x62, 0xe0, 0x60, 0x46,
	0x86, 0x18, 0x21, 0xd8, 0x71, 0x4d, 0x07, 0x8b, 0x42, 0x4d, 0x38, 0xfe, 0x5e, 0x67, 0x6b, 0x24,
	0x42, 0xc1, 0x37, 0x23, 0xdb, 0x33, 0x2d, 0x31, 0xc3, 0xb6, 0xe7, 0x21, 0xfa, 0x0d, 0x0a, 0x8e,
	0x49, 0x87, 0x63, 0x1c, 0x8a, 0xd9, 0x5a, 0xf6, 0xb8, 0xa8, 0x94, 0xe5, 0xdb, 0x39, 0x3b, 0x71,
	0x42, 0x9f, 0xe7, 0xeb, 0xef, 0x05, 0xc8, 0xb1, 0x2d, 0x74, 0x09, 0xe5, 0xd0, 0x9b, 0x06, 0x43,
	0xdc, 0x0f, 0xb1, 0x8d, 0x87, 0xd4, 0x0b, 0x44, 0x81, 0x35, 0xff, 0xba, 0xd2, 0x2c, 0x1b, 0xac,
	0xcc, 0x48, 0xaa, 0x54, 0x97, 0x06, 0x91, 0x5e, 0x0a, 0x53, 0x9b, 0xe8, 0x4f, 0xc8, 0x07, 0xde,
	0x94, 0xe2, 0x50, 0xcc, 0x30, 0x90, 0x83, 0x05, 0x48, 0x1b, 0x87, 0x94, 0xb8, 0x26, 0x25, 0x9e,
	0xab, 0x27, 0x45, 0x52, 0x13, 0xf6, 0x36, 0xa0, 0xa2, 0x0a, 0x64, 0x27, 0x38, 0x4a, 0x58, 0xc7,
	0x4b, 0xb4, 0x0f, 0xb9, 0x99, 0x69, 0x4f, 0x71, 0x42, 0x99, 0x07, 0xff, 0x65, 0xfe, 0x11, 0xea,
	0x1f, 0x04, 0x28, 0x2e, 0x41, 0x23, 0x13, 0xf6, 0xad, 0x45, 0xb8, 0x4a, 0x4a, 0xde, 0x38, 0xcf,
	0xf2, 0x3a, 0xcd, 0x6f, 0xcf, 0x5a, 0xcf, 0xa0, 0x2a, 0xe4, 0x6f, 0x30, 0x19, 0x8d, 0x29, 0x9b,
	0xe6, 0x07, 0x3d, 0x89, 0xa4, 0x33, 0x10, 0xb7, 0x01, 0x3d, 0x88, 0xd2, 0xa7, 0x0c, 0x54, 0xd3,
	0x46, 0x50, 0x5d, 0xcb, 0xf7, 0x88, 0x4b, 0x1f, 0x68, 0x88, 0x13, 0xd8, 0x77, 0x39, 0x4e, 0x3f,
	0xe4, 0x40, 0x7d, 0xd6, 0x9d, 0x65, 0x65, 0xc8, 0x4d, 0x3d, 0x43, 0x8b, 0xb1, 0xda, 0x90, 0xb7,
	0xcd, 0x01, 0xb6, 0x43, 0x71, 0x87, 0xe9, 0xf5, 0xc7, 0x42, 0xaf, 0xcd, 0x13, 0xc9, 0x97, 0xac,
	0x9c, 0xab, 0x95, 0xf4, 0xc6, 0xd4, 0x42, 0x6a, 0x52, 0x2c, 0xe6, 0x38, 0x35, 0x16, 0xc4, 0x12,
	0x4c, 0x03, 0x5b, 0xcc, 0x73, 0x09, 0xa6, 0x81, 0x8d, 0x5a, 0x50, 0xc6, 0x6f, 0x7c, 0x12, 0xf0,
	0xa3, 0x8a, 0xaf, 0x83, 0x58, 0xa8, 0x09, 0xc7, 0x45, 0x45, 0x92, 0x47, 0x9e, 0x37, 0xb2, 0x31,
	0xbf, 0x18, 0x83, 0xe9, 0xb5, 0xdc, 0x9b, 0xdf, 0x15, 0xbd, 0xb4, 0x68, 0x89, 0x37, 0xa5, 0x7f,
	0xa1, 0xb8, 0x34, 0xc3, 0x83, 0x84, 0x7e, 0x9b, 0x81, 0xb2, 0x66, 0xa8, 0x3a, 0xa7, 0xc8, 0xfd,
	0xd3, 0x84, 0xf2, 0x8a, 0x66, 0x0c, 0xab, 0xa8, 0x88, 0xdb, 0xa4, 0xd0, 0x4b, 0x69, 0x21, 0xd1,
	0x6b, 0x38, 0x5c, 0x95, 0xdd, 0x31, 0x5d, 0x73, 0x84, 0x03, 0x36, 0x42, 0x51, 0xa9, 0xdd, 0xa5,
	0xaa, 0x7e, 0x90, 0x86, 0xec, 0xf0, 0x76, 0x74, 0x05, 0xe2, 0x2a, 0x32, 0x4e, 0x5a, 0xd8, 0xa1,
	0xde, 0x07, 0xba, 0xea, 0x6e, 0xdc, 0xaf, 0x7f, 0x5c, 0x73, 0xdd, 0xad, 0xe1, 0x4f, 0x60, 0x67,
	0x42, 0x5c, 0x8b, 0x09, 0x51, 0x52, 0x8e, 0xb6, 0x3d, 0xe2, 0x82, 0xb8, 0x96, 0xce, 0x2a, 0x51,
	0x13, 0x7e, 0xd9, 0x36, 0x28, 0xb7, 0x20, 0x3f, 0x0b, 0x69, 0xf3, 0x2c, 0xcc, 0x8a, 0xdf, 0xd0,
	0xbc, 0x73, 0x62, 0x1b, 0xcd, 0xbb, 0x74, 0x9d, 0x72, 0xa9, 0xeb, 0xf4, 0x08, 0xa7, 0xfd, 0x7e,
	0x0d, 0x68, 0x5d, 0x2b, 0x74, 0x00, 0x3f, 0xb6, 0xf4, 0xae, 0x61, 0xf4, 0x5b, 0x5d, 0x4d, 0x53,
	0x5b, 0xbd, 0xbe, 0x66, 0xa8, 0x95, 0xef, 0xd0, 0xcf, 0x70, 0xa8, 0xa9, 0xbd, 0x57, 0x5d, 0xfd,
	0xa2, 0x6f, 0xa8, 0xfa, 0xcb, 0xf3, 0x96, 0xda, 0xef, 0x34, 0xb5, 0xe6, 0x53, 0x55, 0xaf, 0x08,
	0xe8, 0x08, 0xc4, 0xd5, 0xa4, 0xaa, 0xb5, 0x9f, 0x77, 0xcf, 0xb5, 0x5e, 0x25, 0xa3, 0xbc, 0x5b,
	0x3b, 0xc4, 0xc4, 0xdc, 0x11, 0x7a, 0x02, 0xbb, 0x7c, 0x8d, 0x03, 0xf4, 0xd3, 0x92, 0x32, 0x69,
	0xff, 0x4b, 0xdb, 0x53, 0xe8, 0x19, 0x14, 0x3a, 0x9e, 0x4b, 0x62, 0x47, 0xd4, 0xee, 0x92, 0xf6,
	0x0b, 0x38, 0x27, 0x02, 0x3a, 0x85, 0xbc, 0x8e, 0x1d, 0x6f, 0x86, 0xef, 0x01, 0x54, 0x5d, 0x7b,
	0x17, 0xa8, 0xf1, 0x57, 0x15, 0xfd, 0x0f, 0xf9, 0x17, 0xbe, 0x15, 0xbf, 0x58, 0xbe, 0x8a, 0x8d,
	0xe2, 0xc2, 0x61, 0xfa, 0x89, 0x6d, 0x12, 0x0e, 0xbd, 0x19, 0x0e, 0x22, 0x64, 0x00, 0x3a, 0x23,
	0xae, 0xb5, 0xf2, 0x31, 0x7e, 0x1c, 0xe7, 0xd3, 0xbf, 0xaf, 0x94, 0x11, 0xa1, 0xe3, 0xe9, 0x40,
	0x1e, 0x7a, 0x4e, 0x23, 0xb1, 0x6f, 0xe2, 0x6c, 0x07, 0x87, 0xe3, 0x86, 0xe9, 0x93, 0x86, 0x3f,
	0x19, 0xb1, 0xff, 0x39, 0xce, 0x20, 0xcf, 0x58, 0xff, 0xf5, 0x39, 0x00, 0x00, 0xff, 0xff, 0x92,
	0x59, 0x8a, 0xbd, 0x72, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkServiceRegistryClient is the client API for NetworkServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceRegistryClient interface {
	Register(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error)
	Monitor(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_MonitorClient, error)
	Remove(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error)
}

type networkServiceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceRegistryClient(cc grpc.ClientConnInterface) NetworkServiceRegistryClient {
	return &networkServiceRegistryClient{cc}
}

func (c *networkServiceRegistryClient) Register(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error) {
	out := new(NSERegistration)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceRegistryClient) Monitor(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceRegistry_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceRegistry_serviceDesc.Streams[0], "/registry.NetworkServiceRegistry/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceRegistryMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceRegistry_MonitorClient interface {
	Recv() (*NSERegistration, error)
	grpc.ClientStream
}

type networkServiceRegistryMonitorClient struct {
	grpc.ClientStream
}

func (x *networkServiceRegistryMonitorClient) Recv() (*NSERegistration, error) {
	m := new(NSERegistration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceRegistryClient) Remove(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceRegistryClient) Update(ctx context.Context, in *NSERegistration, opts ...grpc.CallOption) (*NSERegistration, error) {
	out := new(NSERegistration)
	err := c.cc.Invoke(ctx, "/registry.NetworkServiceRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceRegistryServer is the server API for NetworkServiceRegistry service.
type NetworkServiceRegistryServer interface {
	Register(context.Context, *NSERegistration) (*NSERegistration, error)
	Monitor(*NetworkServiceSelector, NetworkServiceRegistry_MonitorServer) error
	Remove(context.Context, *NetworkServiceSelector) (*empty.Empty, error)
	Update(context.Context, *NSERegistration) (*NSERegistration, error)
}

// UnimplementedNetworkServiceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceRegistryServer struct {
}

func (*UnimplementedNetworkServiceRegistryServer) Register(ctx context.Context, req *NSERegistration) (*NSERegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Monitor(req *NetworkServiceSelector, srv NetworkServiceRegistry_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Remove(ctx context.Context, req *NetworkServiceSelector) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedNetworkServiceRegistryServer) Update(ctx context.Context, req *NSERegistration) (*NSERegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterNetworkServiceRegistryServer(s *grpc.Server, srv NetworkServiceRegistryServer) {
	s.RegisterService(&_NetworkServiceRegistry_serviceDesc, srv)
}

func _NetworkServiceRegistry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSERegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).Register(ctx, req.(*NSERegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceRegistry_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceRegistryServer).Monitor(m, &networkServiceRegistryMonitorServer{stream})
}

type NetworkServiceRegistry_MonitorServer interface {
	Send(*NSERegistration) error
	grpc.ServerStream
}

type networkServiceRegistryMonitorServer struct {
	grpc.ServerStream
}

func (x *networkServiceRegistryMonitorServer) Send(m *NSERegistration) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServiceRegistry_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkServiceSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).Remove(ctx, req.(*NetworkServiceSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSERegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.NetworkServiceRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceRegistryServer).Update(ctx, req.(*NSERegistration))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceRegistry",
	HandlerType: (*NetworkServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NetworkServiceRegistry_Register_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _NetworkServiceRegistry_Remove_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NetworkServiceRegistry_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _NetworkServiceRegistry_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// NetworkServiceDiscoveryClient is the client API for NetworkServiceDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceDiscoveryClient interface {
	FindNetworkService(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceDiscovery_FindNetworkServiceClient, error)
}

type networkServiceDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceDiscoveryClient(cc grpc.ClientConnInterface) NetworkServiceDiscoveryClient {
	return &networkServiceDiscoveryClient{cc}
}

func (c *networkServiceDiscoveryClient) FindNetworkService(ctx context.Context, in *NetworkServiceSelector, opts ...grpc.CallOption) (NetworkServiceDiscovery_FindNetworkServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkServiceDiscovery_serviceDesc.Streams[0], "/registry.NetworkServiceDiscovery/FindNetworkService", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceDiscoveryFindNetworkServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServiceDiscovery_FindNetworkServiceClient interface {
	Recv() (*NSERegistration, error)
	grpc.ClientStream
}

type networkServiceDiscoveryFindNetworkServiceClient struct {
	grpc.ClientStream
}

func (x *networkServiceDiscoveryFindNetworkServiceClient) Recv() (*NSERegistration, error) {
	m := new(NSERegistration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServiceDiscoveryServer is the server API for NetworkServiceDiscovery service.
type NetworkServiceDiscoveryServer interface {
	FindNetworkService(*NetworkServiceSelector, NetworkServiceDiscovery_FindNetworkServiceServer) error
}

// UnimplementedNetworkServiceDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceDiscoveryServer struct {
}

func (*UnimplementedNetworkServiceDiscoveryServer) FindNetworkService(req *NetworkServiceSelector, srv NetworkServiceDiscovery_FindNetworkServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method FindNetworkService not implemented")
}

func RegisterNetworkServiceDiscoveryServer(s *grpc.Server, srv NetworkServiceDiscoveryServer) {
	s.RegisterService(&_NetworkServiceDiscovery_serviceDesc, srv)
}

func _NetworkServiceDiscovery_FindNetworkService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkServiceSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceDiscoveryServer).FindNetworkService(m, &networkServiceDiscoveryFindNetworkServiceServer{stream})
}

type NetworkServiceDiscovery_FindNetworkServiceServer interface {
	Send(*NSERegistration) error
	grpc.ServerStream
}

type networkServiceDiscoveryFindNetworkServiceServer struct {
	grpc.ServerStream
}

func (x *networkServiceDiscoveryFindNetworkServiceServer) Send(m *NSERegistration) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkServiceDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.NetworkServiceDiscovery",
	HandlerType: (*NetworkServiceDiscoveryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindNetworkService",
			Handler:       _NetworkServiceDiscovery_FindNetworkService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}
