syntax = "proto3";

package registry;
option go_package = "github.com/networkservicemesh/api/pkg/api/registry";

import "ptypes/empty/empty.proto";
import "ptypes/timestamp/timestamp.proto";

message NetworkService {
    string name = 1;
    string payload = 2;
    repeated Match matches = 3;
}

message Match {
    map<string, string> source_selector = 1;
    repeated Destination routes = 2;
}

message Destination {
    map<string, string> destination_selector = 1;
    uint32 weight = 2;
}

message NetworkServiceEndpoint {
    string name = 1;
    string payload = 2;
    string network_service_name = 3;
    map<string, string> labels = 4;
    string state = 5;
    // Endpoint callback address, could be any of unix/tcp/callback schema ones.
    string url = 6;
    google.protobuf.Timestamp expiration_time = 7;
}

message NSERegistration {
    NetworkService network_service = 1;
    NetworkServiceEndpoint network_service_manager = 2;
    NetworkServiceEndpoint network_service_endpoint = 3;
}

service NetworkServiceRegistry {
    rpc Register (NSERegistration) returns (NSERegistration);
    rpc Monitor (NetworkServiceSelector) returns (stream NSERegistration);
    rpc Remove (NetworkServiceSelector) returns (google.protobuf.Empty);
    rpc Update (NSERegistration) returns (NSERegistration);
}

service NetworkServiceDiscovery {
    rpc FindNetworkService (NetworkServiceSelector) returns (stream NSERegistration);
}

enum NetworkServiceKind {
    CROSS_CONNECT_NSE = 0;
    NETWORK_SERVICE_MANAGER = 1;
    NETWORK_SERVICE_ENDPOINT = 2;
}

message NetworkServiceSelector {
    NetworkServiceKind kind = 1;
    string network_service_endpoint_name = 2;
    string network_service_name = 3;
    map<string, string> labels = 4;
    string payload = 5;
}